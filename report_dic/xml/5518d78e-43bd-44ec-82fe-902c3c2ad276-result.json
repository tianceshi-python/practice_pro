{"name": "test_StopRecording001", "status": "broken", "statusDetails": {"message": "PermissionError: [Errno 13] Permission denied: 'recordingVods_casedata.xlsx'", "trace": "self = <test_StopRecording.Test_StopRecording object at 0x000001977EF72E48>\n\n    @pytest.mark.run(order=2)\n    @pytest.mark.RecordingAndVods\n    @allure.story('test_StopRecording')\n    @allure.title('test_StopRecording001')\n    def test_StopRecording001(self):\n        '''\n        用例描述： 开始录制视频\n        '''\n    \n        self.log.debug('test_StopRecording001 starting......')\n        print('test_StopRecording001 starting......')\n    \n        # 获取云会议室callNumber\n        meetingRoomNumber = self.get_caseDataObj.get_data(ExcelName='recordingVods_casedata.xlsx', sheetName='test_data',\n                                                   testName='test_StopRecording001', getdata='meetingRoomNumber')\n        # 获取期望返回码excepectCode\n        excepectCode = self.get_caseDataObj.get_data(ExcelName='recordingVods_casedata.xlsx',\n                                                     sheetName='ExpectedResult', testName='test_StopRecording001',\n                                                     getdata='expected_code')\n    \n    \n        print('meetingRoomNumber is: ',meetingRoomNumber)\n        print('excepectCode is: ',excepectCode)\n    \n        # 添加附件信息到allure报告中\n        allure.attach('meetingRoomNumber is: ', meetingRoomNumber)\n        allure.attach('excepectCode is: ', excepectCode)\n        allure.attach('stop_recording_base_url is: ', self.stop_recording_base_url)\n    \n        self.log.debug('meetingRoomNumber is: ' + meetingRoomNumber)\n        self.log.debug('excepectCode is: ' + excepectCode)\n        self.log.debug('stop_recording_base_url is: ' + self.stop_recording_base_url)\n    \n        # 调取踢出会议接口，将指定的参会人员踢出会议\n        code, body = self.recordingVodsObj.stop_recording(self.stop_recording_base_url, meetingRoomNumber)\n        print('code is: ', code)\n        print('body is', body)\n    \n>       self.writeExcelObj.write_xml(sheet_name = 'responseData',case_name = 'test_StopRecording001', message = body)\n\n..\\test_RecordingAndVods\\test_StopRecording.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\writeExcel.py:69: in write_xml\n    mywb.save(self.xls_name)    #注意：直接操作文件名\n..\\..\\venv\\lib\\site-packages\\openpyxl\\workbook\\workbook.py:392: in save\n    save_workbook(self, filename)\n..\\..\\venv\\lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>, file = 'recordingVods_casedata.xlsx'\nmode = 'w', compression = 8, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'recordingVods_casedata.xlsx'\n\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python37\\lib\\zipfile.py:1204: PermissionError"}, "description": "\n        用例描述： 开始录制视频\n        ", "attachments": [{"name": "9005853980", "source": "acc92b28-7b92-4477-b6ad-e95d5ec7989e-attachment.attach"}, {"name": "200", "source": "d0062471-3178-4d60-a19b-b3cec29036e3-attachment.attach"}, {"name": "https://sdk.xylink.com/api/rest/external/v2/meeting/recording/", "source": "d664885a-f65d-42c3-a1e2-d6f90abd6fd5-attachment.attach"}, {"name": "log", "source": "2e507d4a-2246-4216-90c4-5b6f86f0ddc1-attachment.txt", "type": "text/plain"}], "start": 1595920991514, "stop": 1595920991721, "uuid": "d24e2629-fce9-4ed3-8d2d-e8ba5f256896", "historyId": "acbb70e9ef96d256d1b6808b7c15de02", "testCaseId": "23c7ec7888c3f9690b4bb55aa844a235", "fullName": "testCase.test_RecordingAndVods.test_StopRecording.Test_StopRecording#test_StopRecording001", "labels": [{"name": "feature", "value": "Test_StopRecording"}, {"name": "story", "value": "test_StopRecording"}, {"name": "tag", "value": "RecordingAndVods"}, {"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "testCase.test_RecordingAndVods"}, {"name": "suite", "value": "test_StopRecording"}, {"name": "subSuite", "value": "Test_StopRecording"}, {"name": "host", "value": "DESKTOP-8HDD4PN"}, {"name": "thread", "value": "17588-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCase.test_RecordingAndVods.test_StopRecording"}]}