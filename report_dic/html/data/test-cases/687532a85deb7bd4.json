{
  "uid" : "687532a85deb7bd4",
  "name" : "test_StartRecording001",
  "fullName" : "testCase.test_RecordingAndVods.test_start_recording.Test_StartRecording#test_StartRecording001",
  "historyId" : "8f53c13445375f6007a653226b774746",
  "time" : {
    "start" : 1595584114294,
    "stop" : 1595584114597,
    "duration" : 303
  },
  "description" : "\n        用例描述： 开始录制视频\n        ",
  "descriptionHtml" : "<pre><code>    用例描述： 开始录制视频\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: can only concatenate str (not \"int\") to str",
  "statusTrace" : "self = <test_start_recording.Test_StartRecording object at 0x000001DD8787DA90>\n\n    @pytest.mark.run(order=1)\n    @pytest.mark.RecordingAndVods\n    @allure.story('test_StartRecording')\n    @allure.title('test_StartRecording001')\n    def test_StartRecording001(self):\n        '''\n        用例描述： 开始录制视频\n        '''\n    \n        self.log.debug('test_StartRecording001 starting......')\n        print('test_StartRecording001 starting......')\n    \n        # 获取云会议室callNumber\n        meetingRoomNumber = self.get_caseDataObj.get_data(ExcelName='recordingVods_casedata.xlsx', sheetName='test_data',\n                                                   testName='test_StartRecording001', getdata='meetingRoomNumber')\n        # 获取期望返回码excepectCode\n        excepectCode = self.get_caseDataObj.get_data(ExcelName='recordingVods_casedata.xlsx',\n                                                     sheetName='ExpectedResult', testName='test_StartRecording001',\n                                                     getdata='expected_code')\n    \n    \n        print('meetingRoomNumber is: ',meetingRoomNumber)\n        print('excepectCode is: ',excepectCode)\n    \n        #添加附件信息到allure报告中\n        allure.attach('meetingRoomNumber is: ',meetingRoomNumber)\n        allure.attach('excepectCode is: ',excepectCode)\n        allure.attach('start_recording_base_url is: ',self.start_recording_base_url)\n    \n        self.log.debug('meetingRoomNumber is: '+ meetingRoomNumber)\n        self.log.debug('excepectCode is: '+ excepectCode)\n        self.log.debug('start_recording_base_url is: '+ self.start_recording_base_url)\n    \n        # 调取踢出会议接口，将指定的参会人员踢出会议\n        code, body = self.recordingVodsObj.start_recording(self.start_recording_base_url, meetingRoomNumber)\n        print('code is: ', code)\n        #print('body is', body)\n    \n        allure.attach('responseCode is: ', code)\n>       self.log.debug('responseCode is: '+ code)\nE       TypeError: can only concatenate str (not \"int\") to str\n\ntestCase\\test_RecordingAndVods\\test_start_recording.py:85: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1595584114287,
      "stop" : 1595584114287,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_Class__pytest_setup_method",
    "time" : {
      "start" : 1595584114287,
      "stop" : 1595584114292,
      "duration" : 5
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        用例描述： 开始录制视频\n        ",
    "status" : "broken",
    "statusMessage" : "TypeError: can only concatenate str (not \"int\") to str",
    "statusTrace" : "self = <test_start_recording.Test_StartRecording object at 0x000001DD8787DA90>\n\n    @pytest.mark.run(order=1)\n    @pytest.mark.RecordingAndVods\n    @allure.story('test_StartRecording')\n    @allure.title('test_StartRecording001')\n    def test_StartRecording001(self):\n        '''\n        用例描述： 开始录制视频\n        '''\n    \n        self.log.debug('test_StartRecording001 starting......')\n        print('test_StartRecording001 starting......')\n    \n        # 获取云会议室callNumber\n        meetingRoomNumber = self.get_caseDataObj.get_data(ExcelName='recordingVods_casedata.xlsx', sheetName='test_data',\n                                                   testName='test_StartRecording001', getdata='meetingRoomNumber')\n        # 获取期望返回码excepectCode\n        excepectCode = self.get_caseDataObj.get_data(ExcelName='recordingVods_casedata.xlsx',\n                                                     sheetName='ExpectedResult', testName='test_StartRecording001',\n                                                     getdata='expected_code')\n    \n    \n        print('meetingRoomNumber is: ',meetingRoomNumber)\n        print('excepectCode is: ',excepectCode)\n    \n        #添加附件信息到allure报告中\n        allure.attach('meetingRoomNumber is: ',meetingRoomNumber)\n        allure.attach('excepectCode is: ',excepectCode)\n        allure.attach('start_recording_base_url is: ',self.start_recording_base_url)\n    \n        self.log.debug('meetingRoomNumber is: '+ meetingRoomNumber)\n        self.log.debug('excepectCode is: '+ excepectCode)\n        self.log.debug('start_recording_base_url is: '+ self.start_recording_base_url)\n    \n        # 调取踢出会议接口，将指定的参会人员踢出会议\n        code, body = self.recordingVodsObj.start_recording(self.start_recording_base_url, meetingRoomNumber)\n        print('code is: ', code)\n        #print('body is', body)\n    \n        allure.attach('responseCode is: ', code)\n>       self.log.debug('responseCode is: '+ code)\nE       TypeError: can only concatenate str (not \"int\") to str\n\ntestCase\\test_RecordingAndVods\\test_start_recording.py:85: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "686f080e65018c8b",
      "name" : "9005853980",
      "source" : "686f080e65018c8b.attach",
      "type" : "text/plain",
      "size" : 22
    }, {
      "uid" : "d616b733ef4f3c9c",
      "name" : "200",
      "source" : "d616b733ef4f3c9c.attach",
      "type" : "text/plain",
      "size" : 17
    }, {
      "uid" : "81793f44d557c21",
      "name" : "https://sdk.xylink.com/api/rest/external/v1/meeting/recording/",
      "source" : "81793f44d557c21.attach",
      "type" : "text/plain",
      "size" : 29
    }, {
      "uid" : "4bc39117f5fe9cc8",
      "name" : "200",
      "source" : "4bc39117f5fe9cc8.attach",
      "type" : "text/plain",
      "size" : 17
    }, {
      "uid" : "28fca3997f565e4",
      "name" : "log",
      "source" : "28fca3997f565e4.txt",
      "type" : "text/plain",
      "size" : 933
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 5,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1595584114799,
      "stop" : 1595584114799,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_Class__pytest_setup_method::0",
    "time" : {
      "start" : 1595584114798,
      "stop" : 1595584114798,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "test_StartRecording"
  }, {
    "name" : "feature",
    "value" : "Test_StartRecording"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "tag",
    "value" : "RecordingAndVods"
  }, {
    "name" : "parentSuite",
    "value" : "testCase.test_RecordingAndVods"
  }, {
    "name" : "suite",
    "value" : "test_start_recording"
  }, {
    "name" : "subSuite",
    "value" : "Test_StartRecording"
  }, {
    "name" : "host",
    "value" : "DESKTOP-8HDD4PN"
  }, {
    "name" : "thread",
    "value" : "11544-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCase.test_RecordingAndVods.test_start_recording"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=1)", "RecordingAndVods" ]
  },
  "source" : "687532a85deb7bd4.json",
  "parameterValues" : [ ]
}