# encoding:utf-8
'''
题目描述：
对输入的单词进行字典序排序输出，字典序定义：

1.单词中字母比较不区分大小写，两个单词先以第一个字母作为排序的基准，
   如果第一个字母相同，就用第二个字母为基准，
   如果第二个字母相同就以第三个字母为基准。
   依此类推，如果到某个字母不相同，字母顺序在前的那个单词顺序在前。
2.当一个短单词和一个长单词的开头部分都相同（即短单词是长单词从首字母开始的一部分），短单词顺序在前。
3.字母大小写不同的相同单词，只输出一次。

 输入描述：不超过255个字符中,单词间用空格进行分隔，为简单起见，单词不包含连字符，无其它标点符号。
 输出描述：输出排序后的单词，单词之间用空格隔开（最后不带空格），重复的单词只输出一次。
'''


'''
sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。
list.sort(cmp=None, key=None, reverse=False)

    cmp -- 可选参数, 如果指定了该参数会使用该参数的方法进行排序。
    key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
    reverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）。


'''




import re
def zdx(sword):
    #print('sword:',sword)
    l = []            #用于存储去重后的单词
    temp = sword.split(" ")       #将输入的字符串按照空格进行分割，并以列表的形式存储
    for i in temp:            #遍历每个单词
        if i.lower() not in [j.lower() for j in l]:
            l.append(i)
    print('l is：',l)
    return " ".join(sorted(l, key=str.lower))          #给l列表按照小写字母，升序进行排列，并将列表转换成字符串，然后返回



while True:
    s = input("请输入用空格进行分隔的单词：")

    # 输入描述：不超过255个字符中,单词间用空格进行分隔，为简单起见，单词不包含连字符，无其它标点符号。
    if len(s) <= 255:
        p = re.compile(r"^[a-zA-Z\s]{0,255}$")        #输入字符串的开头和结尾进行判断，由大写或小写字幕组成，且长度在0~255之间
        if p.match(s):
            print("输入合格：" + s)
            test = zdx(s)
            print("按字典序排列输出为：%s" % test)
            break
        else:
            print("输入只能是字母或空格，请重新输入!")
    else:
        print("输入不得超过255个字符，请重新输入!")